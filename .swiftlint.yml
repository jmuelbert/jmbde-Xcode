included:
  - jmbde
  - jmbdeTests
  - jmbdeUITests
excluded:
  - jmbdeTests/Resources
analyzer_rules:
  - unused_import
  - unused_private_declaration
opt_in_rules:
  - anyobject_protocol
  - array_init
  - attributes
  - closure_end_indentation
  - closure_spacing
  - collection_alignment
  - contains_over_first_not_nil
  - empty_count
  - empty_string
  - empty_xctest_method
  - explicit_init
  - extension_access_modifier
  - fallthrough
  - fatal_error_message
  - file_header
  - file_name
  - first_where
  - identical_operands
  - joined_default_parameter
  - let_var_whitespace
  - last_where
  - literal_expression_end_indentation
  - lower_acl_than_parent
  - nimble_operator
  - number_separator
  - object_literal
  - operator_usage_whitespace
  - overridden_super_call
  - override_in_extension
  - pattern_matching_keywords
  - private_action
  - private_outlet
  - prohibited_interface_builder
  - prohibited_super_call
  - quick_discouraged_call
  - quick_discouraged_focused_test
  - quick_discouraged_pending_test
  - redundant_nil_coalescing
  - redundant_type_annotation
  - single_test_class
  - sorted_first_last
  - sorted_imports
  - static_operator
  - unavailable_function
  - unneeded_parentheses_in_closure_argument
  - untyped_error_in_catch
  - vertical_parameter_alignment_on_call
  - vertical_whitespace_closing_braces
  - vertical_whitespace_opening_braces
  - xct_specific_matcher
  - yoda_condition

identifier_name:
  excluded:
    - id
number_separator:
  minimum_length: 5
file_name:
  excluded:
    - TestHelpers.swift
    - shim.swift

custom_rules:
  if_as_guard:
    included: ".*\\.swift"
    regex: '\n *if [^\{]+\{\s*(?:return|break|continue)[^\n]*\n *\}(?! *else)'
    name: "If as Guard"
    message: "Don't use an if statement to just return/break/continue – use guard for such cases instead."
    severity: warning
  late_force_unwrapping:
    included: ".*\\.swift"
    regex: '\(\S+\?\.\S+\)!'
    name: "Late Force Unwrapping"
    message: "Don't use ? first to force unwrap later – directly unwrap within the parantheses."
    severity: warning
  missing_docs:
    included: ".*\\.swift"
    regex: '\n *(?!\/\/\/)(\/\/)?[^\n\/]*\n *(?:@\S+ )*(?:public|open)'
    name: "Missing Docs"
    message: "Types, properties and methods with public or open access level should be documented."
    severity: warning
  multiple_closure_params:
    included: ".*\\.swift"
    regex: '\} *\) *\{'
    name: "Multiple Closure Params"
    message: "Don't use multiple in-line closures – save one or more of them to variables instead."
    severity: warning
  single_line_return:
    included: ".*\\.swift"
    regex: '\.\S+ *\{(?: *return|[^\n\}]+ in return) [^\}]+\}'
    name: "Single Line Return"
    message: "Remove the 'return' when returning from a single line closure."
    severity: warning
  space_before_comment:
    included: ".*\\.swift"
    regex: '\n[ ]{0}[^\/ \n][^\n]*\n[ ]{0}\/\/|\n[ ]{4}[^\/ \n][^\n]*\n[ ]{4}\/\/|\n[ ]{8}[^\/ \n][^\n]*\n[ ]{8}\/\/|\n[ ]{16}[^\/ \n][^\n]*\n[ ]{16}\/\/|\n[ ]{20}[^\/ \n][^\n]*\n[ ]{20}\/\/|\n[ ]{24}[^\/ \n][^\n]*\n[ ]{24}\/\/'
    name: "Space Before Comment"
    message: "Always put a space line before a comment line and always comment code beforehand."
    severity: warning
  vertical_whitespaces_around_mark:
    included: ".*\\.swift"
    regex: '\/\/\s*MARK:[^\n]*(\n)(?!\n)|(\n\n\n)[ \t]*\/\/\s*MARK:|[^\s{]\n[^\n\/]*\/\/\s*MARK:'
    name: "Vertical Whitespaces Around MARK:"
    message: "Include a single vertical whitespace (empty line) before and after MARK: comments."
  whitespace_comment_start:
    included: ".*\\.swift"
    regex: '[^:#][^:#]\/\/[^\s\/]'
    name: "Whitespace Comment Start"
    message: "A comment should always start with a whitespace."
    severity: warning
  carthage_typo:
    included: ".*\\.(swift|md)"
    regex: "(Carhage|Cartage)"
    name: "Carthage Typo"
    message: "Found a possible Carthage typo"
    severity: warning
